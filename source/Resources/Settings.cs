using YamlDotNet;
using YamlDotNet.Serialization;
using System;
using System.IO;

namespace Bread_Tools.Resources
{
    /*
    ** I wanted to use MsgPack-CSharp but it isn't working
    ** Temporarily using YAMLDotNet
    */

    static class Settings
    {
        private static string APPDATA_DIRECTORY = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData);
        private static string SAVE_DIRECTORY = APPDATA_DIRECTORY + "/Bread Tools";
        private static string SAVE_FILE = SAVE_DIRECTORY + "/Settings";

        public struct General
        {
            public bool HiddenFilesFolders;
            public bool OpenRegedit;
            public bool RestartExplorer;
            public bool ShowFileExtensions;

            public string position;
        };

        public struct CommandLine
        {
            public bool OpenWSLHere;
            public bool OpenCommandPromptHere;
            public bool OpenAdminCommandPromptHere;
            public bool OpenPowerShellHere;
            public bool OpenAdminPowerShellHere;

            public string position;
        }

        public struct Power
        {
            public bool Hibernate;
            public bool Lock;
            public bool Restart;
            public bool ShutDown;
            public bool Sleep;
            public bool SwitchUser;

            public string position;
        }

        public struct WindowsSettings
        {
            public bool MainSettings;
            public bool NetworkInternet;
            public bool AboutThisPC;
            public bool WindowsUpdate;

            public string position;
        }

        public struct Info
        {
            public General general;
            public CommandLine command;
            public Power power;
            public WindowsSettings settings;
        };


        public static Info Data = new Info();

        public static bool HasSettings()
            => File.Exists(SAVE_FILE);

        public static void LoadSettings()
        {
            var deserializer = new DeserializerBuilder().Build();
            Data = deserializer.Deserialize<Info>(File.ReadAllText(SAVE_FILE));
        }

        public static void SaveSettings()
        {
            if (!Directory.Exists(SAVE_DIRECTORY))
                Directory.CreateDirectory(SAVE_DIRECTORY);

            var serializer = new SerializerBuilder().Build();
            File.WriteAllText(SAVE_FILE, "# DO NOT EDIT THIS FILE\n\n" + serializer.Serialize(Data));
        }
    }
}
